/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include <cstdlib>
#include <initializer_list>
#include <iostream>
#include <numeric>

#undef __HIP_NO_HALF_CONVERSIONS__

#include <ATen/ATen.h>
#include <ATen/hip/impl/HIPStreamMasqueradingAsCUDA.h>
#include <torch/torch.h>
#include <ATen/native/hip/ck_gemm.h>


#include "ck/ck.hpp"
#include "ck/tensor_operation/gpu/device/gemm_specialization.hpp"
#include "ck/tensor_operation/gpu/device/tensor_layout.hpp"
#include "ck/tensor_operation/gpu/element/element_wise_operation.hpp"
#include "ck/utility/data_type.hpp"

#include "ck/library/reference_tensor_operation/cpu/reference_gemm.hpp"
#include "ck/library/utility/check_err.hpp"
#include "ck/library/utility/device_memory.hpp"
#include "ck/library/utility/fill.hpp"
#include "ck/library/utility/host_tensor.hpp"
#include "ck/library/utility/host_tensor_generator.hpp"
#include "ck/library/utility/literals.hpp"

#include "ck/tensor_operation/gpu/device/impl/device_gemm_multiple_d_xdl_cshuffle_v3.hpp"

// Define commonly used types.
template <ck::index_t... Is>
using S = ck::Sequence<Is...>;

using Row = ck::tensor_layout::gemm::RowMajor;
using Col = ck::tensor_layout::gemm::ColumnMajor;
using PassThrough = ck::tensor_operation::element_wise::PassThrough;
using Add = ck::tensor_operation::element_wise::Add;

namespace at::native {

template <>
void gemm_internal_ck<double>(CUDABLAS_GEMM_ARGTYPES(double)) {
  return;
}

template <>
void gemm_internal_ck<at::Half>(CUDABLAS_GEMM_ARGTYPES(at::Half)) {
  return;
}

template <>
void gemm_internal_ck<at::BFloat16>(CUDABLAS_GEMM_ARGTYPES(at::BFloat16)) {
  return;
}

template <typename T>
struct CkMathType {
  using dtype = T;
};

template <>
struct CkMathType<at::BFloat16> {
  using dtype = ck::bhalf_t;
};

template <>
struct CkMathType<at::Half> {
  using dtype = ck::half_t;
};


template <
    typename Dtype,
    int BLOCK_SIZE,
    int MBLOCK,
    int NBLOCK,
    int KBLOCK,
    int MPER_XDL,
    int NPER_XDL,
    int MPER_WAVE,
    int NPER_WAVE,
    int CNPER_WAVE = 1,
    bool PADDING = false>
void float_gemm_impl(CUDABLAS_GEMM_ARGTYPES(Dtype)) {
  // Get input information.
  int M = m;
  int N = n;
  int K = k;

  int StrideA = lda;
  int StrideB = ldb;
  int StrideC = ldc;

  using ADataType = typename CkMathType<Dtype>::dtype;
  using BDataType = typename CkMathType<Dtype>::dtype;
  using DDataType = typename CkMathType<Dtype>::dtype;
  using DsDataType = ck::Tuple<>;
  using AccDataType = float;
  using CShuffleDataType = typename CkMathType<Dtype>::dtype;;
  using CDataType = typename CkMathType<Dtype>::dtype;;

#if 0
  using ALayout = Row;
  using BLayout = Col;
  using DLayout = Row;
  using DsLayout = ck::Tuple<>;
  using DsDataType = ck::Tuple<>;
  using CLayout = Row;
#else
  using ALayout = Col;
  using BLayout = Col;
  using DLayout = Col;
  using DsLayout = ck::Tuple<>;
  using CLayout = Col;
#endif

  using AElementOp = PassThrough;
  using BElementOp = PassThrough;
  using CElementOp = PassThrough;

  static constexpr auto GemmDefault =
      ck::tensor_operation::device::GemmSpecialization::Default;
  static constexpr auto GemmMNKPadding =
      ck::tensor_operation::device::GemmSpecialization::MNKPadding;
  static constexpr auto GemmSpec = PADDING ? GemmMNKPadding : GemmDefault;

  // Define derivative constants based on template parameters.
  static constexpr int BLOCK_CLUSTER = BLOCK_SIZE / 4;
  static constexpr int CBLOCK_N = NBLOCK / 16;
  static constexpr int CBLOCK_M = BLOCK_SIZE / CBLOCK_N;

  using DeviceGemmV2Instance =
      ck::tensor_operation::device::DeviceGemmMultiD_Xdl_CShuffle_V3<
          ALayout,
          BLayout,
          DsLayout,
          CLayout,
          ADataType,
          BDataType,
          DsDataType,
          CDataType,
          AccDataType,
          CShuffleDataType,
          AElementOp,
          BElementOp,
          CElementOp,
          GemmSpec,
          BLOCK_SIZE,
          MBLOCK,
          NBLOCK,
          KBLOCK,
          8, // AK1
          8, // BK1
          MPER_XDL, // MPerXDL
          NPER_XDL, // NPerXDL
          MPER_WAVE, // MXdlPerWave
          NPER_WAVE, // NXdlPerWave
          S<4, BLOCK_CLUSTER, 1>, // ABlockTransferThreadClusterLengths
          S<1, 0, 2>, // ABlockTransferThreadClusterOrder
          S<1, 0, 2>, // ABlockTransferSrcAccessOrder
          2, // ABlockTransferSrcVectorDim
          8, // ABlockTransferSrcScalarPerVector
          8, // ABlockTransferDstScalarPerVector
          0, // ABlockLdsExtraM
          S<4, BLOCK_CLUSTER, 1>, // BBlockTransferThreadClusterLengths
          S<1, 0, 2>, // BBlockTransferThreadClusterArrangeOrder
          S<1, 0, 2>, // BBlockTransferSrcAccessOrder
          2, // BBlockTransferSrcVectorDim
          8, // BBlockTransferSrcScalarPerVector
          8, // BBlockTransferDstScalarPerVector
          0, // BBlockLdsExtraN
          1, // CShuffleMXdlPerWavePerShuffle
          CNPER_WAVE, // CShuffleNXdlPerWavePerShuffle
          S<1, CBLOCK_M, 1, CBLOCK_N>, // CShuffleBlockTransferClusterLengths
          S<8, 8, 1>, // CShuffleBlockTransferScalarPerVector
          ck::BlockGemmPipelineScheduler::Intrawave, // Pipeline Schedule
          ck::BlockGemmPipelineVersion::v3>; // Pipeline Version

  // Create gemm launcher and arguments.
  auto gemm = DeviceGemmV2Instance{};
  auto invoker = gemm.MakeInvoker();

  auto a_element_op = AElementOp{};
  auto b_element_op = BElementOp{};
  auto c_element_op = CElementOp{};

  using DDataArrayType = std::array<const void*, 0>;
  using DStrideArrayType = std::array<ck::index_t, 0>;

  DDataArrayType DDataArray;
  DStrideArrayType DStrideArray;

  auto arguments = gemm.MakeArgument(
      reinterpret_cast<const ADataType*>(a),
      reinterpret_cast<const BDataType*>(b),
      DDataArray,
      reinterpret_cast<CDataType*>(c),
      M,
      N,
      K,
      StrideA,
      StrideB,
      DStrideArray,
      StrideC,
      a_element_op,
      b_element_op,
      c_element_op);

  auto stream = at::cuda::getCurrentHIPStream().stream();
  invoker.Run(arguments, StreamConfig{stream, false});
}

#if 0
    int BLOCK_SIZE,
    int MBLOCK,
    int NBLOCK,
    int KBLOCK,
    int MPER_XDL,
    int NPER_XDL,
    int MPER_WAVE,
    int NPER_WAVE,
    int CNPER_WAVE = 1,
    bool PADDING = false>
#endif
void dispatch_float_gemm(CUDABLAS_GEMM_ARGTYPES(float)) {
  // If any of the shapes cant be tiled, we must use padding.
  bool use_padding = ((m % 256 != 0) || (n % 128 != 0) || (k % 64 != 0));
  // Dispatch to best implementation. TODO add more configurations.
  if (use_padding) {
    if (m <= 128) {
      float_gemm_impl<float, 256, 128, 64, 32, 32, 32, 2, 1, 1, true>(CUDABLAS_GEMM_ARGS(float));
#if 0
    // as float type, get error: local memory (98304) exceeds limit (65536)
    } else if ((m >= 8192 && n >= 4096) || (n >= 8192 && m >= 4096)) {
      float_gemm_impl<float, 256, 256, 128, 64, 16, 16, 8, 4, 2, true>(CUDABLAS_GEMM_ARGS(float));
#endif
    } else {
      float_gemm_impl<float, 256, 128, 128, 64, 16, 16, 4, 4, 2, true>(CUDABLAS_GEMM_ARGS(float));
    }
  } else {
#if 0
    // as float type, get error: local memory (98304) exceeds limit (65536)
    if ((m >= 8192 && n >= 4096) || (n >= 8192 && m >= 4096)) {
      float_gemm_impl<float, 256, 256, 128, 64, 16, 16, 8, 4, 2, false>(CUDABLAS_GEMM_ARGS(float));
    } else
#endif
    {
      float_gemm_impl<float, 256, 128, 128, 64, 16, 16, 4, 4, 2, false>(CUDABLAS_GEMM_ARGS(float));
    }
  }
}

template <>
void gemm_internal_ck<float>(CUDABLAS_GEMM_ARGTYPES(float)) {
  dispatch_float_gemm(CUDABLAS_GEMM_ARGS(float));
}

} // namespace at::native

